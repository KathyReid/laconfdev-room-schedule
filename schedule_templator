#!/usr/bin/env python3
"""Load a conference.json and use the info to template some files"""
#

import argparse
import datetime
import json
import pprint
import urllib.request


def safename(s):
    """Given a string, make it safe to use as a short filename"""
    s = s.split(" ")[0].lower()

    # TODO:
    # remove bad chars
    return s


class Event:
    """Represent just one event from the conference"""
    def __init__(self, data):
        # quickly validate the data
        for i in ["start", "end", "name"]:
            if i not in data:
                raise ValueError(f"Missing field {i}")
        self.data = data

    def __repr__(self):
        return pprint.pformat(vars(self), indent=2)

    def __str__(self):
        start = self.data["start"]
        end = self.data["end"]
        name = self.data["name"]
        speaker0 = self.author_name()
        return f"{start} - {end}  {name} ({speaker0})"

    def author_name(self):
        """Return the first author's name, or None"""
        if "authors" not in self.data:
            return None
        author = self.data["authors"][0]
        return author.get("name", None)

    def is_in_room(self, roomname):
        """Check if this event is being held in the named room"""
        if "rooms" not in self.data:
            return False
        for room in self.data["rooms"]:
            this_name = safename(room)
            if roomname == this_name:
                return True
        return False


class Schedule:
    """Represent an entire conference schedule"""
    def __init__(self, url):
        text = urllib.request.urlopen(url).read()
        data = json.loads(text)
        self.data = data["schedule"]

    def rooms(self):
        """Return the set of unique room names"""
        rooms = set()
        for event in self.data:
            # When there are multiple rooms, "room" is the string join of them
            # if "room" in event:
            #     rooms.add(event["room"])
            if "rooms" in event:
                rooms.update(event["rooms"])
        return rooms

    def rooms_safename(self):
        """Mutate the names so that they are short and simple"""
        rooms = set()
        for name in self.rooms():
            rooms.add(safename(name))
        return rooms

    def room_events(self, name):
        """Return only the events in the named room"""
        name = safename(name)
        events = []
        for event in self.data:
            e = Event(event)
            if e.is_in_room(name):
                events.append(e)
        return events


def subp_kinds(args, schedule):
    """Show the unique set of event kinds"""
    # TODO: this should just be a pretty printer for a class function
    kinds = set()
    for event in schedule.data:
        e = Event(event)
        kinds.add(e.data["kind"])

    for kind in kinds:
        print(kind)


def subp_rooms(args, schedule):
    """Show the list of all rooms"""
    if args.raw:
        rooms = schedule.rooms()
    else:
        rooms = schedule.rooms_safename()

    for room in rooms:
        print(room)


def subp_room(args, schedule):
    """Show the events in the named room"""
    for event in schedule.room_events(args.roomname):
        if args.raw:
            pprint.pp(event)
        else:
            print(event)


def subp_next(args, schedule):
    """Show the next event for the named room"""
    # TODO: this should just be a pretty printer for a class function
    now = args.time
    if now is None:
        now = datetime.datetime.now().isoformat(timespec="seconds")

    found = None
    events = schedule.room(args.roomname)
    for event in events:
        if "cancelled" in event and event["cancelled"]:
            # Skip cancelled events
            continue
        if event["start"] < now:
            # already started
            continue
        if found is None:
            # First matching
            found = event
            continue
        if event["start"] < found["start"]:
            # Better match
            found = event
            continue

    pprint.pp(found)


def argparser():
    args = argparse.ArgumentParser(description=__doc__)
    args.add_argument(
        "--json",
        help="The conference.json url (could be a file: url)",
        default="https://2024.everythingopen.au/schedule/conference.json",
    )
    args.add_argument(
        "--raw",
        help="Do not abbreviate or prettify output",
        default=False,
        action="store_true",
    )
    subp = args.add_subparsers(help="Action", required=True)

    kinds = subp.add_parser("kinds", help=subp_kinds.__doc__)
    kinds.set_defaults(func=subp_kinds)

    rooms = subp.add_parser("rooms", help=subp_rooms.__doc__)
    rooms.set_defaults(func=subp_rooms)

    room = subp.add_parser("room", help=subp_room.__doc__)
    room.set_defaults(func=subp_room)
    room.add_argument(
        "roomname",
        help="The room name to search for",
    )

    next = subp.add_parser("next", help=subp_next.__doc__)
    next.set_defaults(func=subp_next)
    next.add_argument(
        "--time",
        help="Force a time to be used as now (YYYY-MM-DDTHH:mm:SS)",
        default=None,
    )
    next.add_argument(
        "roomname",
        help="The room name to search for",
    )

    # TODO:
    # - template a file using a matching event

    r = args.parse_args()
    return r


def main():
    args = argparser()

    schedule = Schedule(args.json)

    args.func(args, schedule)


if __name__ == "__main__":
    main()
