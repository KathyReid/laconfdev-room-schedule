#!/usr/bin/env python3
"""Load a conference.json and use the info to template some files"""
#

import argparse
import datetime
import json
import jinja2
import pprint
import urllib.request


def safename(s):
    """Given a string, make it safe to use as a short filename"""
    s = s.split(" ")[0].lower()

    # TODO:
    # remove bad chars
    return s


class Event:
    """Represent just one event from the conference"""
    def __init__(self, data):
        # quickly validate the data
        for i in ["start", "end", "name"]:
            if i not in data:
                raise ValueError(f"Missing field {i}")
        self.data = data

    def __repr__(self):
        return pprint.pformat(vars(self), indent=2)

    def __str__(self):
        start = self.data["start"]
        end = self.data["end"]
        name = self.data["name"]
        speaker0 = self.author_name()

        if self.is_cancelled():
            return f"{start} - {end}  CANCELLED: {name}"
        if self.is_break():
            return f"{start} - {end}  BREAK: {name}"
        if self.is_changeover():
            return f"{start} - {end}  Room Changeover"

        if speaker0 is None:
            speaker = ""
        else:
            speaker = f"({speaker0})"

        return f"{start} - {end}  {name} {speaker}"

    def author_name(self):
        """Return the first author's name, or None"""
        if "authors" not in self.data:
            return None
        author = self.data["authors"][0]
        return author.get("name", None)

    def is_in_room(self, roomname):
        """Check if this event is being held in the named room"""
        if "rooms" not in self.data:
            return False
        for room in self.data["rooms"]:
            this_name = safename(room)
            if roomname == this_name:
                return True
        return False

    def is_content(self):
        """Is this event an actual talk, or something meta"""
        if self.data["kind"] not in ["talk", "tutorial", "other"]:
            return False
        if "Quiet Room" in self.data["name"]:
            # Not a talk, but do want to show as scheduled content
            return True
        if "abstract" not in self.data:
            # Almost certainly just an empty slot
            return False
        return True

    def is_break(self):
        """Is this event an scheduled break, or something else"""
        if self.data["kind"] in ["morning tea", "lunch", "afternoon tea"]:
            return True
        return False

    def is_changeover(self):
        """Is this event one of the room change gaps?"""
        if self.data["kind"] == "Room Changeover":
            return True
        return False

    def is_cancelled(self):
        """Is this event still going to happen?"""
        return self.data.get("cancelled", False)


class Schedule:
    """Represent an entire conference schedule"""
    def __init__(self, url):
        text = urllib.request.urlopen(url).read()
        data = json.loads(text)
        self.data = data["schedule"]

    def rooms(self):
        """Return the set of unique room names"""
        rooms = set()
        for event in self.data:
            # When there are multiple rooms, "room" is the string join of them
            # if "room" in event:
            #     rooms.add(event["room"])
            if "rooms" in event:
                rooms.update(event["rooms"])
        return rooms

    def rooms_safename(self):
        """Mutate the names so that they are short and simple"""
        rooms = set()
        for name in self.rooms():
            rooms.add(safename(name))
        return rooms

    def room_events(self, name):
        """Return only the events in the named room"""
        name = safename(name)
        events = []
        for event in self.data:
            e = Event(event)
            if not e.is_content():
                # Skip meta events
                continue
            if e.is_in_room(name):
                events.append(e)
        return events

    def next(self, now=None):
        """Return a dictionary of rooms and their next event"""
        if now is None:
            now = datetime.datetime.now().isoformat(timespec="seconds")

        results = {}
        for event in self.data:
            e = Event(event)
            if not e.is_content():
                # dont care about meta
                continue

            # if e.is_cancelled():
            #    # dont show cancelled events
            #    continue

            if e.data["start"] < now:
                # skip anything that is already started
                continue

            for room in e.data["rooms"]:
                roomname = safename(room)
                if roomname not in results:
                    results[roomname] = e
                    continue

                if e.data["start"] < results[roomname].data["start"]:
                    # Better match
                    results[roomname] = e
                    continue
        return results

    def now(self, now=None):
        """Return a dictionary of rooms and their current event"""
        if now is None:
            now = datetime.datetime.now().isoformat(timespec="seconds")

        results = {}
        for event in self.data:
            e = Event(event)

            # Dont filter on content kind or anything else, since
            # if the room is empty or chaos, we still want to know

            if e.data["end"] <= now:
                # skip anything that is already ended
                continue
            if e.data["start"] > now:
                # skip anything that is has not started
                continue

            for room in e.data["rooms"]:
                roomname = safename(room)

                # This gives us the "last matched" instead of a best match
                # but only if the input data has overlapping events
                results[roomname] = e
        return results


def subp_kinds(args, schedule):
    """Show the unique set of event kinds"""
    # TODO: this should just be a pretty printer for a class function
    kinds = set()
    for event in schedule.data:
        e = Event(event)
        kinds.add(e.data["kind"])

    for kind in kinds:
        print(kind)


def subp_rooms(args, schedule):
    """Show the list of all rooms"""
    if args.raw:
        rooms = schedule.rooms()
    else:
        rooms = schedule.rooms_safename()

    for room in rooms:
        print(room)


def subp_room(args, schedule):
    """Show the events in the named room"""
    events = schedule.room_events(args.roomname)
    if args.raw:
        pprint.pp(events)
        return

    for event in events:
        print(event)


def subp_next(args, schedule):
    """Show the next event for the named room"""
    events = schedule.next(args.time)

    if args.raw:
        pprint.pp(events)
        return

    if args.roomname == "ALL":
        for room in sorted(events.keys()):
            print("Room", room)
            print(events[room])
        return

    event = events.get(args.roomname, None)
    print(event)


def subp_now(args, schedule):
    """Show the current event for the named room"""
    events = schedule.now(args.time)

    if args.raw:
        pprint.pp(events)
        return

    if args.roomname == "ALL":
        for room in sorted(events.keys()):
            print("Room", room)
            print(events[room])
        return

    event = events.get(args.roomname, None)
    print(event)


def subp_tpl_rooms(args, schedule):
    """Render the template for each of the rooms"""

    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader("."),
        extensions=["jinja2.ext.do", "jinja2.ext.loopcontrols"],
    )

    # TODO: the template loader doesnt work with relative paths
    tpl = env.get_template(args.template)

    rooms = schedule.rooms()
    now = schedule.now(args.time)
    next = schedule.next(args.time)

    for room in rooms:
        codename = safename(room)
        db = {
            "room": room,
            "codename": codename,
            "now": now,
            "next": next,
        }
        result = tpl.render(db)

        filename = f"{args.prefix}-{codename}{args.suffix}"
        f = open(filename, "w")
        f.write(result)
        f.close()


def argparser():
    args = argparse.ArgumentParser(description=__doc__)
    args.add_argument(
        "--json",
        help="The conference.json url (could be a file: url)",
        default="https://2024.everythingopen.au/schedule/conference.json",
    )
    args.add_argument(
        "--raw",
        help="Do not abbreviate or prettify output",
        default=False,
        action="store_true",
    )
    args.add_argument(
        "--time",
        help="Force a time to be used as now (YYYY-MM-DDTHH:mm:SS)",
        default=None,
    )
    subp = args.add_subparsers(help="Action", required=True)

    kinds = subp.add_parser("kinds", help=subp_kinds.__doc__)
    kinds.set_defaults(func=subp_kinds)

    rooms = subp.add_parser("rooms", help=subp_rooms.__doc__)
    rooms.set_defaults(func=subp_rooms)

    room = subp.add_parser("room", help=subp_room.__doc__)
    room.set_defaults(func=subp_room)
    room.add_argument(
        "roomname",
        help="The room name to search for",
    )

    next = subp.add_parser("next", help=subp_next.__doc__)
    next.set_defaults(func=subp_next)
    next.add_argument(
        "roomname",
        help="The room name to search for (or ALL)",
    )

    now = subp.add_parser("now", help=subp_now.__doc__)
    now.set_defaults(func=subp_now)
    now.add_argument(
        "roomname",
        help="The room name to search for",
    )

    tpl_rooms = subp.add_parser("tpl_rooms", help=subp_tpl_rooms.__doc__)
    tpl_rooms.set_defaults(func=subp_tpl_rooms)
    tpl_rooms.add_argument(
        "template",
        help="The Jinja template to use",
    )
    tpl_rooms.add_argument(
        "prefix",
        help="Output filename prefix",
    )
    tpl_rooms.add_argument(
        "suffix",
        help="Output filename suffix",
    )

    r = args.parse_args()
    return r


def main():
    args = argparser()

    schedule = Schedule(args.json)

    args.func(args, schedule)


if __name__ == "__main__":
    main()
